datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//App models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  plan  Plan @default(FREE)
  accounts      Account[]
  sessions      Session[]
  products      Product[]
  createdAt DateTime @default(now())
 updatedAt DateTime @default(now()) @updatedAt

}

enum Plan {
  FREE
  PRO
}



model Product {
  id String @id @default(cuid())
  name String
  image String //URL
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  //Capture page
  noteText String?
  informationText String?
  reviewText String?
  thanksText String?
  backgroundColor String?
  enabled Boolean @default(true)
  reviews Review[]
}

model Review {
  id String @id @default(cuid())
  rating Int
  text String?
  ip String
  //Audio Url
  audio   String?
  socialLink String?
  socialType SocialType?
  // Image and name getting from social
  name String?
  image String?

  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SocialType {
  TWITTER
  LINKEDIN
}